
#!/bin/bash
# William J L Kavanagh, April 2018 - University of Glasgow
# bkav93@gmail.com
# USAGE: ./Balancer max_iterations
echo "Running full balance check for: KAvKW:"
echo ""

declare -i var_runs
var_runs=1
if [[ $# -eq 2 ]] ; then
    echo 'The seed strategy has a preferred move'
    echo -n "Building model $var_runs : Free-Seed ... "
    # Create Free-Naive contest
    python prefix.py K A K W mdp > FN.prism
    python free_strat.py K A K W 1 >> FN.prism
    python seed_strat.py K A K W 2 $2 >> FN.prism
else
    echo 'The seed strategy has no preferred move (naive)'
    echo -n "Building model $var_runs : Free-Naive ... "
    # Create Free-Naive contest
    python prefix.py K A K W mdp > FN.prism
    python free_strat.py K A K W 1 >> FN.prism
    python seed_strat.py K A K W 2 none >> FN.prism
fi


cp FN.prism FNmul.prism
python suffix.py K A K W default >> FN.prism
python suffix.py K A K W multiple >> FNmul.prism

echo "Model generated, describing adversary and checking ..."
# Generate adversary for team 1 and reset log.txt
prism FN.prism props.props -prop 1 -s > log.txt
python display_result.py
let "var_runs += 1"
prism FNmul.prism props.props -prop 1 -s -exportadvmdp tmp.tra -exportstates tmp.sta >> log.txt

echo "===================="
echo -n "Building model $var_runs : Educated-Free ... "
# Create Educated-Free contest
python prefix.py K A K W mdp > EF.prism
python educated.py tmp 1 K A K W >> EF.prism
python adversary_diag.py EF.prism
python free_strat.py K A K W 2 >> EF.prism
cp EF.prism EFmul.prism
python suffix.py K A K W default >> EF.prism
python suffix.py K A K W multiple >> EFmul.prism

echo "Model generated, describing adversary and checking ..."
# Generate adversary for team 2
prism EF.prism props.props -prop 3 -s >> log.txt
python display_result.py $var_runs
let "var_runs += 1"
prism EFmul.prism props.props -prop 3 -s -exportadvmdp tmp.tra -exportstates tmp.sta >> log.txt

echo "===================="
echo -n "Building model $var_runs : Free-Educated ... "
python prefix.py K A K W mdp > FE.prism
python free_strat.py K A K W 1 >> FE.prism
python educated.py tmp 2 K A K W >> FE.prism
python adversary_diag.py FE.prism
cp FE.prism FEmul.prism
python suffix.py K A K W default >> FE.prism
python suffix.py K A K W multiple >> FEmul.prism

echo "Model generated, describing adversary and checking ..."
prism FE.prism props.props -prop 1 -s >> log.txt
python display_result.py $var_runs
let "var_runs += 1"
prism FEmul.prism props.props -prop 1 -s -exportadvmdp tmp.tra -exportstates tmp.sta >> log.txt

declare -i loop_count
loop_count=1
while [ $loop_count -lt $(($1+1)) ] ;
do

        echo "===================="
        echo ">>> re-education loop: $loop_count"
        echo "===================="

        echo -n "Building model $var_runs : Educated-Free ... "
        # Create Educated-Free contest
        python prefix.py K A K W mdp > EF.prism
        python educated.py tmp 1 K A K W >> EF.prism
        python adversary_diag.py EF.prism
        python free_strat.py K A K W 2 >> EF.prism
        cp EF.prism EFmul.prism
        python suffix.py K A K W default >> EF.prism
        python suffix.py K A K W multiple >> EFmul.prism

        echo "Model generated, describing adversary and checking ..."
        # Generate adversary for team 2
        prism EF.prism props.props -prop 3 -s  >> log.txt
        python display_result.py $var_runs
        let "var_runs += 1"
        prism EFmul.prism props.props -prop 3 -s -exportadvmdp tmp.tra -exportstates tmp.sta >> log.txt

        echo "===================="
        echo -n "Building model $var_runs : Free-Educated ... "
        python prefix.py K A K W mdp > FE.prism
        python free_strat.py K A K W 1 >> FE.prism
        python educated.py tmp 2 K A K W >> FE.prism
        python adversary_diag.py FE.prism
        cp FE.prism FEmul.prism
        python suffix.py K A K W default >> FE.prism
        python suffix.py K A K W multiple >> FEmul.prism

        echo "Model generated, describing adversary and checking ..."
        prism FE.prism props.props -prop 1 -s >> log.txt
        python display_result.py $var_runs
        let "var_runs += 1"
        prism FEmul.prism props.props -prop 1 -s -exportadvmdp tmp.tra -exportstates tmp.sta >> log.txt

        loop_count=loop_count+1
done

echo "~~~Terminated~~~"
