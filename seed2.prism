mdp

// TEAM 1
	// Knight
const double A_acc = 0.7;
const int A_hea = 8;
const int A_dmg = 3;
	// Archer
const double B_acc = 0.75;
const int B_hea = 7;
const int B_dmg = 2;

// TEAM 2
	// Wizard
const double C_acc = 0.8;
const int C_hea = 7;
const int C_dmg = 2;
	// Archer
const double D_acc = 0.75;
const int D_hea = 7;
const int D_dmg = 2;

module game
	a_hea : [-2..8]	init A_hea;
	b_hea : [-2..8]	init B_hea;
	c_hea : [-2..8]	init C_hea;
	d_hea : [-2..8]	init D_hea;
	turn_clock : [0..2]	init 0;
	attack : [0..10]	init 0; 			// Chosen action:
	// 0 : NONE, 1 : A_C, 2 : A_D, 3 : B_opp, 4 : not_used, 5 : C_A, 6 : C_B, 7 : D_opp, 8 : not_used, 9 : gap_fix, 10 : NEXT TURN.
	a_stun : bool;
	b_stun : bool;
	c_stun : bool;
	d_stun : bool;

	[flip_coin]	turn_clock = 0 ->
				0.5 : (turn_clock' = 1) + 0.5 : (turn_clock' = 2);

	[team_1_turn] turn_clock = 1 & attack = 0 & a_hea > 0 & b_hea > 0 & c_hea > 0 & d_hea > 0 & a_stun = false & b_stun = false ->
				1/3 : (attack' = 1) & (a_stun' = false) & (b_stun' = false) +
				1/3 : (attack' = 2) & (a_stun' = false) & (b_stun' = false) +
				1/3 : (attack' = 3) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & (a_hea <= 0 | a_stun = true) & b_hea > 0 & b_stun = false & c_hea > 0 & d_hea > 0 ->
				1/1 : (attack' = 3) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & a_hea > 0 & a_stun = false & (b_hea <= 0 | b_stun = true) & c_hea > 0 & d_hea > 0 ->
				1/2 : (attack' = 1) & (a_stun' = false) & (b_stun' = false) +
				1/2 : (attack' = 2) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & a_hea > 0 & a_stun = false & b_hea > 0 & b_stun = false & c_hea <= 0 & d_hea > 0 ->
				1/2 : (attack' = 2) & (a_stun' = false) & (b_stun' = false) +
				1/2 : (attack' = 3) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & a_hea > 0 & a_stun = false & b_hea > 0 & b_stun = false & c_hea > 0 & d_hea <= 0 ->
				1/2 : (attack' = 1) & (a_stun' = false) & (b_stun' = false) +
				1/2 : (attack' = 3) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & (a_hea <= 0 | a_stun = true) & b_hea > 0 & b_stun = false & c_hea <= 0 & d_hea > 0 ->
				1 : (attack' = 3) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & (a_hea <= 0 | a_stun = true) & b_hea > 0 & b_stun = false & c_hea > 0 & d_hea <= 0 ->
				1 : (attack' = 3) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & a_hea > 0 & a_stun = false & (b_hea <= 0 | b_stun = true) & c_hea <= 0 & d_hea > 0 ->
				1 : (attack' = 2) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & a_hea > 0 & a_stun = false & (b_hea <= 0 | b_stun = true) & c_hea > 0 & d_hea <= 0 ->
				1 : (attack' = 1) & (a_stun' = false) & (b_stun' = false) ;
	[team_1_turn] turn_clock = 1 & attack = 0 & (a_hea <= 0 & b_stun = true) | (b_hea <= 0 & a_stun = true) ->
				1 : (attack' = 10) & (a_stun' = false) & (b_stun' = false) ;

	[team_2_turn] turn_clock = 2 & attack = 0 & c_hea > 0 & c_stun = false & a_hea > 0 ->
				(attack' = 5) & (c_stun' = false) & (d_stun' = false) ;
	[team_2_turn] turn_clock = 2 & attack = 0 & (c_hea <= 0 | c_stun  = true) & (d_hea <= 0 | d_stun = true) ->
				(attack' = 10) & (c_stun' = false) & (d_stun' = false) ;
	[team_2_turn] turn_clock = 2 & attack = 0 & c_hea > 0 & c_stun = false & b_hea > 0 ->
				(attack' = 6) & (c_stun' = false) & (d_stun' = false) ;
	[team_2_turn] turn_clock = 2 & attack = 0 & (c_hea <= 0 | c_stun  = true) & (d_hea <= 0 | d_stun = true) ->
				(attack' = 10) & (c_stun' = false) & (d_stun' = false) ;
	[team_2_turn] turn_clock = 2 & attack = 0 & d_hea > 0 & d_stun = false & (a_hea > 0 | b_hea > 0) ->
				(attack' = 7) & (c_stun' = false) & (d_stun' = false) ;
	[team_2_turn] turn_clock = 2 & attack = 0 & (c_hea <= 0 | c_stun  = true) & (d_hea <= 0 | d_stun = true) ->
				(attack' = 10) & (c_stun' = false) & (d_stun' = false) ;

	[A_C] attack = 1 & c_hea > 0 ->
			A_acc : (c_hea' = c_hea - A_dmg) & (attack' = 10) + (1-A_acc) : (attack' = 10);
	[A_D] attack = 2 & d_hea > 0 ->
			A_acc : (d_hea' = d_hea - A_dmg) & (attack' = 10) + (1-A_acc) : (attack' = 10);
	[B_opp] attack = 3 & c_hea > 0 & d_hea > 0 ->
			B_acc * B_acc : (c_hea' = c_hea - B_dmg) & (d_hea' = d_hea - B_dmg) & (attack' = 10) +
			B_acc * (1-B_acc) : (c_hea' = c_hea - B_dmg) & (attack' = 10) +
			B_acc * (1-B_acc) : (d_hea' = d_hea - B_dmg) & (attack' = 10) +
			(1-B_acc) * (1-B_acc) : (attack' = 10);
	[B_opp] attack = 3 & c_hea > 0 & d_hea <= 0 ->
			B_acc : (c_hea' = c_hea - B_dmg) & (attack' = 10) + (1-B_acc) : (attack' = 10);
	[B_opp] attack = 3 & c_hea <= 0 & d_hea > 0 ->
			B_acc : (d_hea' = d_hea - B_dmg) & (attack' = 10) + (1-B_acc) : (attack' = 10);
	[C_A] attack = 5 & a_hea > 0 ->
			C_acc : (a_hea' = a_hea - C_dmg) & (a_stun' = true) & (attack' = 10) + 
			(1-C_acc) : (attack' = 10);
	[C_B] attack = 6 & b_hea > 0 ->
			C_acc : (b_hea' = b_hea - C_dmg) & (b_stun' = true) & (attack' = 10) + 
			(1-C_acc) : (attack' = 10);
	[D_opp] attack = 7 & a_hea > 0 & b_hea > 0 ->
			D_acc * D_acc : (a_hea' = a_hea - D_dmg) & (b_hea' = b_hea - D_dmg) & (attack' = 10) +
			D_acc * (1-D_acc) : (a_hea' = a_hea - D_dmg) & (attack' = 10) +
			D_acc * (1-D_acc) : (b_hea' = b_hea - D_dmg) & (attack' = 10) +
			(1-D_acc) * (1-D_acc) : (attack' = 10);
	[D_opp] attack = 7 & a_hea > 0 & b_hea <= 0 ->
			D_acc : (a_hea' = a_hea - D_dmg) & (attack' = 10) + (1-D_acc) : (attack' = 10);
	[D_opp] attack = 7 & a_hea <= 0 & b_hea > 0 ->
			D_acc : (b_hea' = b_hea - D_dmg) & (attack' = 10) + (1-D_acc) : (attack' = 10);

	[next_turn] attack = 10 & turn_clock > 0 & (a_hea > 0 | b_hea > 0) & (c_hea > 0 | d_hea > 0) ->
			(turn_clock' = 3 - turn_clock) & (attack' = 0);

endmodule

//SINGLE INITIAL STATE
label "team_1_win" = (a_hea > 0 | b_hea > 0) & (c_hea <= 0 & d_hea <= 0);
label "team_2_win" = (c_hea > 0 | d_hea > 0) & (a_hea <= 0 & b_hea <= 0);
